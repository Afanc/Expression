source("https://bioconductor.org/biocLite.R")
biocLite("QuasR")
library(Rsamtools)
library(QuasR)
library(GenomicFeatures)
#load the doata from the sequencer
sampleFile <- "tabsep.txt"
#load the genome of C.e from ensembl
genomeFile <- "Caenorhabditis_elegans.WBcel235.dna_sm.chromosome.I.fa"
#map the reads to the genome
aligned = qAlign(sampleFile, genomeFile)
#quality check
qQCReport(aligned, pdfFilename = "quality.pdf")
sampleFile <- "tabsep.txt"
#load the genome of C.e from ensembl
genomeFile <- "Caenorhabditis_elegans.WBcel235.dna_sm.chromosome.I.fa"
#map the reads to the genome
aligned = qAlign(sampleFile, genomeFile)
load("~/tp bioinfo/.RData")
allmerge_rpkm <- sapply(allmerge[,2:17], function(column) 10^9 * column / resForVis$width / sum(column)) #check your variable names (obviously) and the corresponding column numbers in your data frame of counts
allmerge_rpkm <- allmerge_rpkm[apply(allmerge_rpkm, 1, var) != 0, ]
summary(log2(allmerge_rpkm))
group <- factor(c(rep("Oocyte", times=8), rep("Sperm", times=8)))
pca1 <- prcomp(t(allmerge_rpkm), scale = TRUE)
print(summary(pca1))
plot(pca1$x[,1], pca1$x[,2], xlab="PC1", ylab="PC2", col=c("Light Pink", "Light Blue")[as.numeric(group)], pch=as.numeric(group)+15)
text(pca1$x[,1], pca1$x[,2], labels=group, cex= 0.7, pos=3)
sum(pca1$sdev[1 ])/sum(pca1$sdev)
#question 13
biocLite("edgeR")
library(edgeR)
biocLite("locfit")
library(locfit)
vignette("edgeR")
plot(pca1$x[,2], pca1$x[,3], xlab="PC1", ylab="PC2", col=c("Light Pink", "Light Blue")[as.numeric(group)], pch=as.numeric(group)+15)
text(pca1$x[,2], pca1$x[,3], labels=group, cex= 0.7, pos=3)
#sans les zéros
summary(results.rpkm$SRR1263137[results.rpkm$SRR1263137 != 0])
summary(results.rpkm$SRR1263137[results.rpkm$SRR1263140 != 0])
summary(results.rpkm$SRR1263137[results.rpkm$SRR1263141 != 0])
summary(results.rpkm$SRR1263137[results.rpkm$SRR1263169 != 0])
#sans les zéros et transformation log
summary(log2(results.rpkm$SRR1263137[results.rpkm$SRR1263137 != 0]))
summary(log2(results.rpkm$SRR1263140[results.rpkm$SRR1263140 != 0]))
summary(log2(results.rpkm$SRR1263141[results.rpkm$SRR1263141 != 0]))
summary(log2(results.rpkm$SRR1263169[results.rpkm$SRR1263169 != 0]))
rownames(installed.packages())
library(Rsamtools)
rownames(installed.packages())
allmerge_rpkm <- sapply(allmerge[,2:17], function(column) 10^9 * column / allmerge$width / sum(column)) #check your variable names (obviously) and the corresponding column numbers in your data frame of counts
summary(allmerge_rpkm[,1])
summary(log2(allmerge_rpkm[,1] + 10**-6))
allmerge_rpkm_novar <- allmerge_rpkm[apply(allmerge_rpkm, 1, var) != 0, ]
summary(allmerge_rpkm_novar)
summary(allmerge_rpkm_novar[,1])
summary(log2(allmerge_rpkm_novar[,1] + 10**-6))
group <- factor(c(rep("Oocyte", times=8), rep("Sperm", times=8)))
pca1 <- prcomp(t(allmerge_rpkm), scale = TRUE)
summary(pca1)
pca1 <- prcomp(t(allmerge_rpkm), scale = TRUE)
pca1 <- prcomp(t(allmerge_rpkm_novar), scale = TRUE)
summary(pca1)
sum(pca1$sdev[1 ])/sum(pca1$sdev)# de la variance expliquée par le premier facteur score
sum(pca1$sdev[1])/sum(pca1$sdev)# de la variance expliquée par le premier facteur score
head(pca1$sdev)
summary(pca1)
biocLite("edgeR")
library(edgeR)
biocLite("locfit")
library(locfit)
vignette("edgeR")
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
library("edgeR")
library(locfit)
vignette("edgeR")
y <- DGEList(counts=allmerge[,2:17], group=group) # creates edgeR object
y <- calcNormFactors(y) #normalization
rownames(y$counts) <- allmerge$Row.names # change variable names as needed; this provides the gene names
str(y)
design <- model.matrix(~group)
y <- estimateDisp(y,design)
rownames(y$counts) <- allmerge$Row.names
str(y)
?str()
de <- exactTest(y)
results.de <- topTags(de, n = nrow(de), p.value = 0.01)
head(results.de$table)
row.names(results.de$table[1:10,])
head(results.de$table)
result.de$table[1:50,]
results.de$table[1:50,]
results.de$table[1:500,]
length(results.de$table)
length(results.de$table[1,])
length(
results.de$table
results.de$table
results.de$table
length(results.de$table[,1])
length(results.de$table[,7000:7100])
length(results.de$table[7000:7100,1:5])
length(results.de$table[,1])
results.de$table[,1][7000:7100]
results.de$table[,1:4][7000:7100]
results.de$table[,]
results.de$table[7000:7100,]
hist(results.de$table$logFC)
hist(results.de$table$PValue)
plot(results.de$table$logFC, results.de$table$logCPM, cex = 0.1) #cex fixes point size, you can try removing or changing this parameter
plot(results.de$table$logFC, -log10(results.de$table$PValue), cex = 0.1)
head(results.de$table)
head(results.de$table, 10)
row.names(results.de$table[1:10,])
heatmap(as.matrix(log2(rpkm[sample(1:length(rpkm[,1]), 100),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
heatmap(as.matrix(log2(allmerge_rpkm[sample(1:length(allmerge_rpkm[,1]), 100),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:100,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
results.de[1:100,]
row.names(results.de[1:100,])
allmerge_rpkm[row.names(results.de[1:100,]),]
row.names(results.de[1:100,])
rownames(allmerge_rpkm)
rownames(allmerge_rpkm) = rownames(allmerge)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:100,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
rownames(results.de)
heatmap(as.matrix(log2(allmerge_rpkm[sample(1:length(allmerge_rpkm[,1]), 100),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:100,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100))
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:2000,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:400,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:600,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:1000,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:2000,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
heatmap(as.matrix(log2(allmerge_rpkm[row.names(results.de[1:1500,]),]+10^-6)), ColSideColors=c("Light Pink", "Light Blue")[as.numeric(group)], labCol=group, col=colorRampPalette(c("blue", "yellow"))(100), labRow = NA)
#15
library(topGO)
library(org.Ce.eg.db)
bioclite(org.Ce.eg.db)
source("https://bioconductor.org/biocLite.R")
bioClite(org.Ce.eg.db)
biocLite(org.Ce.eg.db)
source("https://bioconductor.org/biocLite.R")
biocLite("org.Ce.eg.db")
library(org.Ce.eg.db)
geneList <- rep(0, times=nrow(allmerge))
names(geneList) <- allmerge$Row.names #check variable names, as usual
geneList[row.names(results.de)] <- 1
geneList = as.factor(geneList)
BPdata <- new("topGOdata", ontology = "BP", allGenes = geneList, annot = annFUN.org, mapping="org.Ce.eg.db", ID="Ensembl")
MFdata <- new("topGOdata", ontology = "MF", allGenes = geneList, annot = annFUN.org, mapping="org.Ce.eg.db", ID="Ensembl")
resultBP <- runTest(BPdata, algorithm = "classic", statistic = "fisher")
resultMF <- runTest(MFdata, algorithm = "classic", statistic = "fisher")
GenTable(BPdata, classic = resultBP, topNodes = 20)
GenTable(MFdata, classic = resultMF, topNodes = 20)
biopro = GenTable(BPdata, classic = resultBP, topNodes = 20)
molfun = GenTable(MFdata, classic = resultMF, topNodes = 20)
biopro$Term[1:10]
biopro$Term[1:10]
molfun$Term[1:10]
setwd("~/GitHub/Expression")
load("images/isa05-6-05")
robust_out = list()
msize_out = list()
i = 1
for(it in 1:length(isa_out)){
robu = isa_out[[it]]$seeddata$rob
robust_out[[i]] = robu
msize = colSums(isa_out[[it]]$rows != 0)
msize_out[[i]] = msize
i = i + 1
}
normed_rob = list()
for(i in 1:length(robust_out)){
normed_rob[[i]] = robust_out[[i]]/msize_out[[i]]
}
pdf("results/normed_rob05-6-05.pdf")           #A CHANGER
boxplot(normed_rob, names=thresholdzz, main="normed robust vs thresholds")
for(i in 1:length(isa_out)){
hist(as.numeric(robust_out[[i]]/msize_out[[i]]), main=paste("normed robustness = ", thresholdzz[i], sep=""))
}
dev.off()
unsize = unlist(msize_out) #Rmagic <3
unrob = unlist(robust_out)
grp = c()
x = 1
for(i in seq(0.5,4, 0.25)){
grp = append(grp, rep(i, times = length(msize_out[[x]]))) #rep the treshold, times = len of module
x = x + 1
}
boxplot(normed_rob, names=thresholdzz, main="normed robust vs thresholds")
boxplot(msize_out)
boxplot(robust_out)
plot(unsize, unrob, col = rainbow(15)[as.factor(grp)],
main = "Size vs robustness of modules between thresholds",
xlab = "Size",
ylab = "Robustness",
xlim = c(0, 8000)) #so faboulous
legend(x ="topright", legend = unique(grp), fill = rainbow(15), cex = 0.7)
